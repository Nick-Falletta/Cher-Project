import { useParams, useNavigate } from 'react-router-dom';
import dataJSON from '../data/modules.json';

const Lesson = ({ onComplete, progress, onAnswer, answers, setAnswers }) => {
  const { id } = useParams();
  const navigate = useNavigate();
  const lessonIndex = parseInt(id) - 1;

  const module1 = dataJSON.module1;
  const data = module1.lessons;
  const lesson = data[lessonIndex];
  const totalLessons = data.length;

  const answer = answers[lessonIndex] || { selected: '', submitted: false, isCorrect: null };
  const { selected, submitted } = answer;
  const progressPercent = Math.round((progress / totalLessons) * 100);

  // Failsafe for if an extra lesson attempts to load
  if (!lesson) return <div className="p-4">Lesson not found.</div>;

  // Saves the answer you selected if you leave the page
  const handleSelect = (option) => {
    const newAnswers = [...answers];
    newAnswers[lessonIndex] = {
      selected: option,
      submitted: false,
      isCorrect: null
    };
    setAnswers(newAnswers);
  };

  // Once answer is submitted, it locks in even if you leave the page
  const handleSubmit = () => {
    if (!submitted && selected) {
      const correct = selected === lesson.answer;
      const newAnswers = [...answers];
      newAnswers[lessonIndex] = {
        selected,
        submitted: true,
        isCorrect: correct
      };
      setAnswers(newAnswers);
      onAnswer((prev) => prev + 1);
    }
  };

  // Next Button - Pushes you to next lesson
  // or completion screen if you completed every lesson
  const handleNext = () => {
    onComplete(lessonIndex + 1);
  };

  // Back Button - Brings user to the previous lesson
  // or home (module) screen
  const goBack = () => {
    if (lessonIndex !== 0) {
      navigate(`/lesson/${lessonIndex}`);
    } else {
      navigate('/');
    }
  };

  return (
    <div className="flex flex-col bg-gray-50 min-h-screen pb-20 lg:pb-0">

      {/* Progress Bar to track lessons completed */}
      <div className="mb-6">
        <div className="text-sm text-gray-600 mb-1">
          Progress: {progress} / {totalLessons} lessons completed
        </div>
        <div className="w-full bg-gray-300 rounded-full h-3 overflow-hidden">
          <div
            className="bg-orange-600 h-full transition-all duration-500"

            // Bar gets filled based on progress/totalLessons * 100 (rounded)
            style={{ width: `${progressPercent}%` }}
          ></div>
        </div>
      </div>

      {/* Title & Lesson Number */}
      <div className="text-3xl font-bold mb-1">{lesson.title}</div>
      <div className="text-xl text-gray-600 mb-6">Lesson {id}</div>

      {/* Lesson Content */}
      <div className="bg-gray-200 rounded-lg p-4">
        <b>NOTICE: For this project, most information (Lesson, Answers, and Reasoning) were generated by ChatGPT</b>
        <p className="mt-3">{lesson.lesson}</p>

        {/* 
            Interactive Image Diagram (only shows if a lesson has a diagram in module.json) 
            In this case it is for the 2nd lesson
        */}
        {lesson.diagram && (
          <div className="mt-6">
            <h3 className="text-lg font-semibold mb-3 text-center">Click to learn:</h3>
            <div className="flex flex-wrap justify-center gap-6">

              {/* Lists out each image and interaction for the diagram */}
              {lesson.diagram.map((item, idx) => (
                <a
                  key={idx}
                  href={item.link}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="cursor-pointer transition-transform hover:scale-105 text-center"
                >
                  <img
                    src={item.img}
                    alt={item.label}
                    className="w-30 h-30 object-contain border border-gray-300 bg-white rounded-lg shadow mx-auto"
                  />
                  <p className="mt-2 font-medium">{item.label}</p>
                </a>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* Divider */}
      <hr className="my-10 lg:my-15 border-.5 border-gray-300 w-full" />

      {/* Multiple Choice Question */}
      <div className="mb-4">
        <p className="text-lg font-semibold mb-2 justify-center flex">{lesson.question}</p>
        <div className='flex flex-col lg:flex-row justify-center text-center'>
          {lesson.options.map((option, idx) => (
            <label
              key={idx}
              // Handles colors for the multiple choice answers:
              // Gray - not selected
              // Orange - selected
              // Green - correct after submitting
              // Red - incorrect after submitting
              className={`block px-4 py-2 rounded border cursor-pointer mb-2 lg:mr-2 lg:w-70 justify-center
                ${!submitted && selected !== option ? 'hover:bg-gray-200 active:bg-gray-200 transition duration-300' : ''}
                ${!submitted && selected === option ? 'hover:bg-orange-200 active:bg-orange-200 transition duration-300' : ''}
                ${submitted && option === lesson.answer ? 'border-green-600 bg-green-100' : ''}
                ${submitted && selected === option && selected !== lesson.answer ? 'border-red-500 bg-red-100' : ''}
                ${!submitted && selected === option ? 'bg-orange-100 border-orange-600' : ''}
                ${!submitted && selected !== option ? 'border-gray-300 bg-white' : ''}`}
            >
              <input
                type="radio"
                name="quiz"
                value={option}
                checked={selected === option}
                onChange={() => handleSelect(option)}
                disabled={submitted}
                className="hidden"
              />
              {option}
            </label>
          ))}
        </div>

        {/* Reason for the correct answer being correct is displayed after submitting */}
        {submitted && (
          <div className="text-sm text-gray-500">Reason: {lesson.reason}</div>
        )}
      </div>

      {/* Submit Answer Button */}
      <div className='flex justify-center'>

        {/* Hides once pressed to submit an answer */}
        <button
          onClick={handleSubmit}
          className={`${submitted ? 'hidden' : ''} text-gray-800 font-bold border-2 border-gray-800 hover:bg-gray-800 hover:text-gray-100 active:bg-gray-800 active:text-gray-100 rounded-lg transition-colors duration-300 px-4 py-2`}
          disabled={!selected}
        >
          Submit Answer
        </button>
      </div>

      {/* Navigation Buttons */}
      <div className="fixed bottom-0 left-0 right-0 bg-white px-4 py-3 border-t border-gray-300 flex justify-between">
        
        {/* Back Button to go back a page */}
        <button
          onClick={goBack}
          className="bg-gray-200 cursor-pointer px-4 py-2 rounded-lg hover:bg-gray-300 active:bg-gray-300 transition duration-300"
        >
          Back
        </button>

        {/* Next Button to go to next lesson (or completion screen if lessons are finished) */}
        {submitted && (
          <button
            onClick={handleNext}
            className="bg-white cursor-pointer border-2 border-orange-600 text-orange-600 px-4 py-2 rounded-lg hover:bg-orange-600 hover:text-white active:bg-orange-600 active:text-white transition duration-300"
          >
            {lessonIndex < data.length - 1 ? 'Next Lesson' : 'Finish Module'}
          </button>
        )}
      </div>
    </div>
  );
};

export default Lesson;