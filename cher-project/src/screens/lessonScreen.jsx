import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';

const Lesson = ({ data, onComplete, progress, onAnswer, answers, setAnswers}) => {
  const { id } = useParams();
  const navigate = useNavigate();
  const lessonIndex = parseInt(id) - 1;
  const lesson = data[lessonIndex];

  const answer = answers[lessonIndex] || { selected: '', submitted: false, isCorrect: null };
  const selected = answer.selected;
  const submitted = answer.submitted;
  const isCorrect = answer.isCorrect;

  // Failsafe for if the app tries to load an extra lesson
  if (!lesson) return <div className="p-4">Lesson not found.</div>;

  const totalLessons = data.length;
  const progressPercent = Math.round((progress / totalLessons) * 100);

  // When an answer is selected, it saves when you leave the page
  const handleSelect = (option) => {
  const newAnswers = [...answers];
  newAnswers[lessonIndex] = {
    selected: option,
    submitted: false,
    isCorrect: null
  };
  setAnswers(newAnswers);
};

  // When an answer is submit, it is saved for when you want to see it again
  const handleSubmit = () => {
    if (!submitted && selected) {
      const correct = selected === lesson.answer;
      const newAnswers = [...answers];
      newAnswers[lessonIndex] = {
        selected,
        submitted: true,
        isCorrect: correct
      };
      setAnswers(newAnswers);
      onAnswer((prev) => prev + 1);
    }
  };

  //Goes to next lesson after answer was submitted
  const handleNext = () => {
    onComplete(lessonIndex+1);
  };

  // Brings user to the previous question or module page
  const goBack = () => {
    if (lessonIndex != 0) {
      navigate(`/lesson/${lessonIndex}`);
    } else {
      navigate('/');
    }
  };

  return (
    <div className="flex flex-col max-w-3xl mx-auto mt-4">

      {/* Progress Bar */}
      <div className="mb-6">
        <div className="text-sm text-gray-600 mb-1">
          Progress: {progress} / {totalLessons} lessons completed
        </div>
        <div className="w-full bg-gray-300 rounded-full h-3 overflow-hidden">
          <div
            className="bg-orange-600 h-full transition-all duration-500"
            style={{ width: `${progressPercent}%` }}
          ></div>
        </div>
      </div>

      {/* Title & Lesson Number */}
      <div className="text-3xl font-bold mb-1">{lesson.title}</div>
      <div className="text-xl text-gray-600 mb-6">Lesson {id}</div>

      {/* Lesson Content */}
      <div className="bg-gray-200 rounded-lg p-4 mb-8">
        <b>NOTICE: For this assignment all information was generated by ChatGPT</b>
        <p className="mt-3">{lesson.content}</p>
      </div>

      {/* Multiple Choice */}
      <div className="mb-4">
        <p className="text-lg font-semibold mb-2">{lesson.question}</p>
        {lesson.options.map((option, idx) => (
          <label
            key={idx}
            className={`block px-4 py-2 rounded border cursor-pointer mb-2 
              ${submitted && option === lesson.answer ? 'border-green-600 bg-green-100' : ''}
              ${submitted && selected === option && selected !== lesson.answer ? 'border-red-500 bg-red-100' : ''}
              ${!submitted && selected === option ? 'bg-orange-100 border-orange-600' : ''}
              ${!submitted && selected !== option ? 'border-gray-300 bg-white' : ''}
            `}
          >
            <input
              type="radio"
              name="quiz"
              value={option}
              checked={selected === option}
              onChange={() => handleSelect(option)}
              disabled={submitted}
              className="hidden"
            />
            {option}
          </label>
        ))}
        {submitted && (
          <div className={`mt-2 font-semibold ${isCorrect ? 'text-green-600' : 'text-red-600'}`}>
            {isCorrect ? 'Correct!' : 'Incorrect.'}
          </div>
        )}
      </div>

      {/* Submit Button */}
      {!submitted && (
        <button
          onClick={handleSubmit}
          className="text-gray-800 font-bold border-2 border-gray-800 hover:bg-gray-800 hover:text-gray-100 rounded-lg transition duration-300 px-4 py-2 mb-8"
          disabled={!selected}
        >
          Submit Answer
        </button>
      )}

      {/* Navigation Buttons */}
      <div className="flex justify-between mt-4">
        <button
          onClick={goBack}
          className="bg-gray-300 px-4 py-2 rounded hover:bg-gray-400"
        >
          Back
        </button>
        {submitted && (
          <button
            onClick={handleNext}
            className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
          >
            {lessonIndex < data.length - 1 ? 'Next Lesson' : 'Finish Module'}
          </button>
        )}
      </div>
    </div>
  );
};

export default Lesson;
